// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recetario.BaseDatos;

namespace Recetario.Migrations
{
    [DbContext(typeof(ContextoBD))]
    [Migration("20201201002130_IngredienteCrudo")]
    partial class IngredienteCrudo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Recetario.BaseDatos.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idActor")
                        .HasColumnType("int(11)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaNac")
                        .HasColumnType("date");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreActor")
                        .IsRequired()
                        .HasColumnType("varchar(55)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tipo")
                        .HasColumnType("int(11)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("actor");
                });

            modelBuilder.Entity("Recetario.BaseDatos.Etiqueta", b =>
                {
                    b.Property<int>("IdEtiqueta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idEtiqueta")
                        .HasColumnType("int(11)");

                    b.Property<string>("Etiqueta1")
                        .IsRequired()
                        .HasColumnName("Etiqueta")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("IdEtiqueta")
                        .HasName("PRIMARY");

                    b.ToTable("etiqueta");
                });

            modelBuilder.Entity("Recetario.BaseDatos.Ingrediente", b =>
                {
                    b.Property<int>("IdIngrediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idIngrediente")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("IdIngrediente")
                        .HasName("PRIMARY");

                    b.ToTable("ingrediente");
                });

            modelBuilder.Entity("Recetario.BaseDatos.Lleva", b =>
                {
                    b.Property<int>("RecetaIdReceta")
                        .HasColumnName("Receta_idReceta")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecetaActorIdActor")
                        .HasColumnName("Receta_Actor_idActor")
                        .HasColumnType("int(11)");

                    b.Property<int>("IngredienteIdIngrediente")
                        .HasColumnName("Ingrediente_idIngrediente")
                        .HasColumnType("int(11)");

                    b.Property<string>("IngredienteCrudo")
                        .IsRequired()
                        .HasColumnName("IngredienteCrudo")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("RecetaIdReceta", "RecetaActorIdActor", "IngredienteIdIngrediente")
                        .HasName("PRIMARY");

                    b.HasIndex("IngredienteIdIngrediente")
                        .HasName("fk_Receta_has_Ingrediente_Ingrediente1_idx");

                    b.HasIndex("RecetaIdReceta", "RecetaActorIdActor")
                        .HasName("fk_Receta_has_Ingrediente_Receta1_idx");

                    b.ToTable("lleva");
                });

            modelBuilder.Entity("Recetario.BaseDatos.Paso", b =>
                {
                    b.Property<int>("NoPaso")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecetaIdReceta")
                        .HasColumnName("Receta_idReceta")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecetaActorIdActor")
                        .HasColumnName("Receta_Actor_idActor")
                        .HasColumnType("int(11)");

                    b.Property<string>("Texto")
                        .HasColumnType("varchar(600)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int?>("TiempoTemporizador")
                        .HasColumnType("int(11)");

                    b.HasKey("NoPaso", "RecetaIdReceta", "RecetaActorIdActor")
                        .HasName("PRIMARY");

                    b.HasIndex("RecetaIdReceta", "RecetaActorIdActor")
                        .HasName("fk_Paso_Receta1_idx");

                    b.ToTable("paso");
                });

            modelBuilder.Entity("Recetario.BaseDatos.Receta", b =>
                {
                    b.Property<int>("IdReceta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idReceta")
                        .HasColumnType("int(11)");

                    b.Property<int>("ActorIdActor")
                        .HasColumnName("Actor_idActor")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("ProcentajePromedio")
                        .HasColumnType("int(11)");

                    b.Property<string>("TiempoPrep")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("IdReceta", "ActorIdActor")
                        .HasName("PRIMARY");

                    b.HasIndex("ActorIdActor")
                        .HasName("fk_Receta_Actor1_idx");

                    b.ToTable("receta");
                });

            modelBuilder.Entity("Recetario.BaseDatos.Usa", b =>
                {
                    b.Property<int>("RecetaIdReceta")
                        .HasColumnName("Receta_idReceta")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecetaActorIdActor")
                        .HasColumnName("Receta_Actor_idActor")
                        .HasColumnType("int(11)");

                    b.Property<int>("EtiquetaIdEtiqueta")
                        .HasColumnName("Etiqueta_idEtiqueta")
                        .HasColumnType("int(11)");

                    b.HasKey("RecetaIdReceta", "RecetaActorIdActor", "EtiquetaIdEtiqueta")
                        .HasName("PRIMARY");

                    b.HasIndex("EtiquetaIdEtiqueta")
                        .HasName("fk_Receta_has_Etiqueta_Etiqueta1_idx");

                    b.HasIndex("RecetaIdReceta", "RecetaActorIdActor")
                        .HasName("fk_Receta_has_Etiqueta_Receta1_idx");

                    b.ToTable("usa");
                });

            modelBuilder.Entity("Recetario.BaseDatos.Visualizacion", b =>
                {
                    b.Property<int>("ActorIdActor")
                        .HasColumnName("Actor_idActor")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecetaIdReceta")
                        .HasColumnName("Receta_idReceta")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecetaActorIdActor")
                        .HasColumnName("Receta_Actor_idActor")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("Calificacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ProcentajeCompl")
                        .HasColumnType("int(11)");

                    b.HasKey("ActorIdActor", "RecetaIdReceta", "RecetaActorIdActor")
                        .HasName("PRIMARY");

                    b.HasIndex("ActorIdActor")
                        .HasName("fk_Actor_has_Receta_Actor1_idx");

                    b.HasIndex("RecetaIdReceta", "RecetaActorIdActor")
                        .HasName("fk_Actor_has_Receta_Receta1_idx");

                    b.ToTable("visualizacion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Recetario.BaseDatos.Actor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Recetario.BaseDatos.Actor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recetario.BaseDatos.Actor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Recetario.BaseDatos.Actor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetario.BaseDatos.Lleva", b =>
                {
                    b.HasOne("Recetario.BaseDatos.Ingrediente", "IngredienteIdIngredienteNavigation")
                        .WithMany("Lleva")
                        .HasForeignKey("IngredienteIdIngrediente")
                        .HasConstraintName("fk_Receta_has_Ingrediente_Ingrediente1")
                        .IsRequired();

                    b.HasOne("Recetario.BaseDatos.Receta", "Receta")
                        .WithMany("Lleva")
                        .HasForeignKey("RecetaIdReceta", "RecetaActorIdActor")
                        .HasConstraintName("fk_Receta_has_Ingrediente_Receta1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetario.BaseDatos.Paso", b =>
                {
                    b.HasOne("Recetario.BaseDatos.Receta", "Receta")
                        .WithMany("Paso")
                        .HasForeignKey("RecetaIdReceta", "RecetaActorIdActor")
                        .HasConstraintName("fk_Paso_Receta1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetario.BaseDatos.Receta", b =>
                {
                    b.HasOne("Recetario.BaseDatos.Actor", "ActorIdActorNavigation")
                        .WithMany("Receta")
                        .HasForeignKey("ActorIdActor")
                        .HasConstraintName("fk_Receta_Actor1")
                        .IsRequired();
                });

            modelBuilder.Entity("Recetario.BaseDatos.Usa", b =>
                {
                    b.HasOne("Recetario.BaseDatos.Etiqueta", "EtiquetaIdEtiquetaNavigation")
                        .WithMany("Usa")
                        .HasForeignKey("EtiquetaIdEtiqueta")
                        .HasConstraintName("fk_Receta_has_Etiqueta_Etiqueta1")
                        .IsRequired();

                    b.HasOne("Recetario.BaseDatos.Receta", "Receta")
                        .WithMany("Usa")
                        .HasForeignKey("RecetaIdReceta", "RecetaActorIdActor")
                        .HasConstraintName("fk_Receta_has_Etiqueta_Receta1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recetario.BaseDatos.Visualizacion", b =>
                {
                    b.HasOne("Recetario.BaseDatos.Actor", "ActorIdActorNavigation")
                        .WithMany("Visualizacion")
                        .HasForeignKey("ActorIdActor")
                        .HasConstraintName("fk_Actor_has_Receta_Actor1")
                        .IsRequired();

                    b.HasOne("Recetario.BaseDatos.Receta", "Receta")
                        .WithMany("Visualizacion")
                        .HasForeignKey("RecetaIdReceta", "RecetaActorIdActor")
                        .HasConstraintName("fk_Actor_has_Receta_Receta1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
